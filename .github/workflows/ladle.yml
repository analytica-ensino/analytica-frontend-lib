name: Deploy Ladle to DigitalOcean Spaces

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build Ladle
        run: yarn ladle:build

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS CLI for DigitalOcean Spaces
        run: |
          echo "üîß Configuring AWS CLI for DigitalOcean Spaces..."

          # Check if secrets are available (without exposing them)
          if [ -z "${{ secrets.DO_SPACES_ACCESS_KEY }}" ]; then
            echo "‚ùå ERROR: DO_SPACES_ACCESS_KEY secret is not set"
            exit 1
          fi

          if [ -z "${{ secrets.DO_SPACES_SECRET_KEY }}" ]; then
            echo "‚ùå ERROR: DO_SPACES_SECRET_KEY secret is not set"
            exit 1
          fi

          if [ -z "${{ secrets.DO_SPACES_BUCKET }}" ]; then
            echo "‚ùå ERROR: DO_SPACES_BUCKET secret is not set"
            exit 1
          fi

          if [ -z "${{ secrets.DO_SPACES_REGION }}" ]; then
            echo "‚ùå ERROR: DO_SPACES_REGION secret is not set"
            exit 1
          fi

          echo "‚úÖ All secrets are configured"
          echo "üìç Region: ${{ secrets.DO_SPACES_REGION }}"
          echo "üì¶ Bucket: ${{ secrets.DO_SPACES_BUCKET }}"

          # Configure AWS CLI
          aws configure set aws_access_key_id ${{ secrets.DO_SPACES_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.DO_SPACES_SECRET_KEY }}
          aws configure set default.region ${{ secrets.DO_SPACES_REGION }}
          aws configure set default.output json

          # Test AWS CLI configuration
          echo "üß™ Testing AWS CLI configuration..."
          aws configure list

      - name: Test DigitalOcean Spaces connection
        id: bucket_check
        run: |
          echo "üîç Testing connection to DigitalOcean Spaces..."
          echo "Endpoint: https://${{ secrets.DO_SPACES_REGION }}.digitaloceanspaces.com"
          echo "Bucket: ${{ secrets.DO_SPACES_BUCKET }}"

          # First, test basic connectivity
          echo "Testing basic endpoint connectivity..."
          if curl -s --head "https://${{ secrets.DO_SPACES_REGION }}.digitaloceanspaces.com" > /dev/null; then
            echo "‚úÖ Endpoint is reachable"
          else
            echo "‚ùå Endpoint is not reachable"
            exit 1
          fi

          # Test bucket access with more verbose error reporting
          echo "Testing bucket access..."
          if aws s3api head-bucket --bucket ${{ secrets.DO_SPACES_BUCKET }} --endpoint-url https://${{ secrets.DO_SPACES_REGION }}.digitaloceanspaces.com; then
            echo "bucket_accessible=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Bucket is accessible"

            # Check if bucket has contents
            echo "Checking bucket contents..."
            if aws s3 ls s3://${{ secrets.DO_SPACES_BUCKET }} --endpoint-url https://${{ secrets.DO_SPACES_REGION }}.digitaloceanspaces.com --max-items 1 > /dev/null 2>&1; then
              echo "bucket_has_content=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Bucket has existing content"
            else
              echo "bucket_has_content=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è  Bucket is empty"
            fi
          else
            echo "bucket_accessible=false" >> $GITHUB_OUTPUT
            echo "‚ùå Cannot access bucket"

            # Try to provide more detailed error information
            echo "Debugging bucket access..."
            echo "Trying to list all buckets to verify credentials..."
            aws s3 ls --endpoint-url https://${{ secrets.DO_SPACES_REGION }}.digitaloceanspaces.com || echo "Failed to list buckets"

            echo "Trying alternative endpoints..."
            aws s3api head-bucket --bucket ${{ secrets.DO_SPACES_BUCKET }} --endpoint-url https://${{ secrets.DO_SPACES_REGION }}.cdn.digitaloceanspaces.com || echo "CDN endpoint failed"

            exit 1
          fi

      - name: Deploy to DigitalOcean Spaces (First time / Empty bucket)
        if: steps.bucket_check.outputs.bucket_has_content == 'false'
        run: |
          echo "Performing initial upload to empty bucket..."

          # Upload static assets with long cache
          aws s3 cp build/ s3://${{ secrets.DO_SPACES_BUCKET }}/ \
            --endpoint-url https://${{ secrets.DO_SPACES_REGION }}.digitaloceanspaces.com \
            --recursive \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.json"

          # Upload HTML and JSON files with no cache
          aws s3 cp build/ s3://${{ secrets.DO_SPACES_BUCKET }}/ \
            --endpoint-url https://${{ secrets.DO_SPACES_REGION }}.digitaloceanspaces.com \
            --recursive \
            --cache-control "no-cache, no-store, must-revalidate" \
            --include "*.html" \
            --include "*.json" \
            --exclude "*"

      - name: Deploy to DigitalOcean Spaces (Update existing)
        if: steps.bucket_check.outputs.bucket_has_content == 'true'
        run: |
          echo "Updating existing bucket content..."

          # Sync static assets with delete flag
          aws s3 sync build/ s3://${{ secrets.DO_SPACES_BUCKET }} \
            --endpoint-url https://${{ secrets.DO_SPACES_REGION }}.digitaloceanspaces.com \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.json"

          # Sync HTML and JSON files with no cache
          aws s3 sync build/ s3://${{ secrets.DO_SPACES_BUCKET }} \
            --endpoint-url https://${{ secrets.DO_SPACES_REGION }}.digitaloceanspaces.com \
            --cache-control "no-cache, no-store, must-revalidate" \
            --include "*.html" \
            --include "*.json" \
            --exclude "*"

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          aws s3 ls s3://${{ secrets.DO_SPACES_BUCKET }} --endpoint-url https://${{ secrets.DO_SPACES_REGION }}.digitaloceanspaces.com --recursive --human-readable --summarize

      - name: Deploy Success
        run: |
          echo "‚úÖ Build deployed successfully!"
          echo "üåê URL: https://${{ secrets.DO_SPACES_BUCKET }}.${{ secrets.DO_SPACES_REGION }}.digitaloceanspaces.com"
          echo "üìÅ Bucket: ${{ secrets.DO_SPACES_BUCKET }}"
          echo "üåç Region: ${{ secrets.DO_SPACES_REGION }}"
